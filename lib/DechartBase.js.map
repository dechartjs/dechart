{"version":3,"sources":["DechartBase.js"],"names":["state","styles","DechartBase","chartType","componentId","data","defaultOptions","options","requireNonEmpty","eventHandlers","$chartRoot","$svgRoot","$htmlRoot","init","Error","log","requireNode","svgRoot","select","SVG_ROOT","empty","append","attr","HTML_ROOT","selectAll","remove","eventName","payload","subscribers","map","s","global","undefined","ns","DECHART_CLASS_NAME","d","idx","elem","selectedData","activeIndex","className","indexOf","e","i","chunks","document","getElementById","head","getElementsByTagName","styleNode","createElement","type","style","globalStyle","length","styleSheet","cssText","appendChild","createTextNode","console","debug","handler","keys","Object","values","legend","legendHeight","legendEntry","enter","on","handleClickLegendEntry","bind","color","text","label","clearSvgRoot","injectStyle","setBoundingRectSize","rendered","render","attachEventHandlers","err","error","height","offsetHeight","width","offsetWidth","marginLeft","marginRight","marginTop","marginBottom","obj","objName","errorMessage","selector","parent","d3","node","prototype"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nimport {\n  HTML_ROOT,\n  SVG_ROOT,\n} from './dechart';\nimport { pushToObject } from './utils';\n\nconst state = {\n  styles: {},\n};\n\nexport default class DechartBase {\n  constructor({\n    chartType,\n    componentId,\n    data,\n    defaultOptions,\n    options,\n  }) {\n    this.chartType = DechartBase.requireNonEmpty(chartType);\n    this.componentId = DechartBase.requireNonEmpty(componentId, 'componentId');\n    this.data = DechartBase.requireNonEmpty(data, 'data');\n    this.eventHandlers = {};\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n\n    this.$chartRoot = null;\n    this.$svgRoot = null;\n    this.$htmlRoot = null;\n\n    this.init();\n  }\n\n  get cssNamespace() {\n    return `.${this.DECHART_CLASS_NAME}.${this.chartType}`;\n  }\n\n  get pureWidth() {\n    return this.options.width\n      - this.options.marginLeft\n      - this.options.marginRight;\n  }\n\n  get pureHeight() {\n    return this.options.height\n      - this.options.marginTop\n      - this.options.marginBottom\n      - this.options.legendHeight;\n  }\n\n  static requireNonEmpty(obj, objName) {\n    const errorMessage = `Dechart needs ${objName}`;\n    if (obj === undefined || obj === null) throw new Error(errorMessage);\n    if (obj.length && obj.length === 0) throw new Error(errorMessage);\n    return obj;\n  }\n\n  static requireNode(selector, parent = d3) {\n    const node = parent.select(selector);\n    if (!node || node.empty()) throw new Error('Dechart needs a html node: %s', selector);\n    return node;\n  }\n\n  hasDrawableData() {\n    throw new Error('Dechart needs hasDrawableData()');\n  }\n\n  init() {\n    this.log();\n\n    this.$chartRoot = DechartBase.requireNode(`#${this.componentId}`);\n    const svgRoot = this.$chartRoot.select(`.${SVG_ROOT}`);\n    this.$svgRoot = svgRoot.empty() \n      ? this.$chartRoot.append('svg').attr('class', SVG_ROOT)\n      : svgRoot;\n    this.$htmlRoot = DechartBase.requireNode(`.${HTML_ROOT}`, this.$chartRoot);\n  }\n\n  attachEventHandlers() {}\n\n  clearSvgRoot() {\n    this.$svgRoot.selectAll('*').remove();\n  }\n\n  emit(eventName, payload) {\n    DechartBase.requireNonEmpty(eventName);\n    const subscribers = this.eventHandlers[eventName] || {};\n    subscribers.map && subscribers.map((s) => s(payload));\n  }\n\n  globalStyle() {\n    // Global style should be inserted only once\n    if (state.styles.global !== undefined) return '';\n\n    state.styles['global'] = true;\n    const ns = '.' + this.DECHART_CLASS_NAME;\n    return `\n      ${ns} .axis line, .axis path {\n        stroke: #323232;\n      }\n\n      ${ns} .axis text {\n        fill: #323232;\n        font-size: 11px;\n      }\n\n      ${ns} .grid line {\n        stroke: #dfe1e5;\n      }\n\n      ${ns} .legendWrapper {\n        align-items: center;\n        display: flex;\n        font-size: 11px;\n        justify-content: left;\n        margin-bottom: 10px;\n        margin-top: 20px;\n        line-height: 16px;\n      }\n\n      ${ns} .legendWrapper > div {\n        margin-left: 20px;        \n      }\n\n      ${ns} .legendWrapper .group {\n        cursor: pointer;\n        display: inline-block;\n        margin-right: 20px;\n      }\n\n      ${ns} .legendWrapper .group.active {\n        font-weight: 600;\n      }\n\n      ${ns} .legendWrapper .group:hover {\n        color: #111;\n      }\n\n      ${ns} .legendWrapper .group > p {\n        display: inline-block;\n      }\n      \n      ${ns} .legendWrapper .colorBox {\n        border-radius: 2px;\n        height: 6px;\n        margin-right: 6px;\n        width: 20px;\n      }\n\n      ${ns} .hide {\n        display: none;\n      }\n    `;\n  }\n\n  handleClickLegendEntry(d, idx, elem) {\n    let selectedData = undefined;\n    const activeIndex = elem[idx].className.indexOf(' active');\n\n    if (activeIndex === -1) {\n      elem.map((e, i) => {\n        e.className = i === idx ? elem[i].className + ' active' : 'group';\n      });\n      selectedData = {\n        ...this.data,\n        chunks: [\n          { ...this.data.chunks[idx] },\n        ],\n      };\n    } else {\n      elem[idx].className = 'group';\n      selectedData = this.data;\n    }\n  }\n\n  injectStyle() {\n    // Modify className of a target DOM node.\n    document.getElementById(this.componentId).className += ` ${this.DECHART_CLASS_NAME} ${this.chartType}`;\n\n    // inject only once\n    if (state.styles[this.chartType] !== undefined) return;\n\n    const head = document.head || document.getElementsByTagName('head')[0];\n    const styleNode = document.createElement('style');\n    styleNode.type = 'text/css';\n    const style = this.globalStyle() + this.style();\n\n    if (style.length > 0) {\n      if (styleNode.styleSheet) {\n        styleNode.styleSheet.cssText = style;\n      } else {\n        styleNode.appendChild(document.createTextNode(style));\n      }\n      head.appendChild(styleNode);\n      state.styles[this.chartType] = true;\n    }\n  }\n\n  log() {\n    console.debug(this.chartType, this.componentId, this.options, this.data);\n  }\n\n  on(eventName, handler) {\n    DechartBase.requireNonEmpty(eventName);\n    pushToObject(this.eventHandlers, eventName, handler);\n    return this;\n  }\n\n  renderLegend(data) {\n    if (!data.keys) return;\n    this.$htmlRoot.select('.legendWrapper').remove();\n    const keys = Object.values(data.keys);\n    const legend = this.$htmlRoot.append('div')\n      .attr('class', 'legendWrapper')\n      .style('height', this.options.legendHeight)\n      .append('div')\n      .attr('class', 'inner');\n\n    const legendEntry = legend.selectAll('.legendWrapper')\n      .data(keys)\n      .enter()\n      .append('div')\n      .attr('class', 'group')\n      .on('click', this.handleClickLegendEntry.bind(this));\n\n    legendEntry.append('p')\n      .attr('class', 'colorBox')\n      .style('background-color', (d) => d.color);\n\n    legendEntry.append('p')\n      .attr('class', 'text')\n      .text((d) => d.label);\n  }\n\n  renderProxy() {\n    try {\n      this.clearSvgRoot();\n      this.injectStyle();\n      this.setBoundingRectSize();\n      const rendered = this.render();\n      !!rendered && this.attachEventHandlers();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  setBoundingRectSize() {\n    this.options.height = this.options.height\n      ? this.options.height\n      : document.getElementById(this.componentId).offsetHeight;\n\n    this.options.width = this.options.width\n      ? this.options.width\n      : document.getElementById(this.componentId).offsetWidth;\n  }\n\n  style() {\n    throw new Error('Dechart needs style()');\n  }\n\n  /**\n   * todos: dynamic chart update functinality\n   */\n  update() {\n  }\n}\n\nDechartBase.prototype.DECHART_CLASS_NAME = '__dechart__';\n"],"file":"DechartBase.js"}