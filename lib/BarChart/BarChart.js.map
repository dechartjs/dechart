{"version":3,"sources":["BarChart/BarChart.js"],"names":["defaultOptions","areaOpacity","backgroundColor","barColor","barColorHover","barWidth","undefined","gridColor","legendHeight","marginBottom","marginLeft","marginRight","marginTop","minYScale","paddingLeft","paddingRight","showGrid","showLegend","showXAxis","showYAxis","xAxisFontColor","xAxisFontSize","xAxisTicks","yAxisFontColor","yAxisFontSize","yAxisTicks","BarChart","chartType","componentId","data","options","xScale","yScale","yMax","yMin","$svgRootInner","renderProxy","values","length","keys","selectedSeries","sortedData","sort","value1","value2","date1","Date","date","date2","processedData","forEach","d","push","key","d3","isoParse","value","Object","width","willDraw","hasDrawableData","preprocess","renderRoot","renderGrid","showXAxisLine","renderXAxisLine","renderXAxis","renderYAxis","renderBars","pureHeight","rootInner","bars","selectAll","enter","append","attr","exit","remove","pureWidth","yGrid","axisLeft","tickFormat","tickValues","tickSize","call","select","svgRoot","$svgRoot","style","height","SVG_ROOT_INNER","max","a","b","min","scaleBand","domain","map","range","scaleLinear","svgInner","xAxis","axisBottom","ticks","yAxis","ns","cssNamespace","DechartBase"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nimport BarChartEvents from './BarChartEvents';\nimport DechartBase from '../DechartBase';\nimport { SVG_ROOT_INNER } from '../dechart';\nimport {\n  abbrNum,\n  compose,\n  createEvenlySpacedArray,\n  getMonthName,\n  isMidnight,\n  makeWrap,\n  normalizeMaxValue,\n  pick,\n} from '../utils';\n\nconst defaultOptions = {\n  areaOpacity: 1.0,\n  backgroundColor: '#fff',\n  barColor: '#3cc187',\n  barColorHover: '#d1ebf9',\n  barWidth: undefined,\n  gridColor: '#dfe1e5',\n  legendHeight: 22,\n  marginBottom: 23,\n  marginLeft: 35,\n  marginRight: 30,\n  marginTop: 5,\n  minYScale: false,\n  paddingLeft: 21,\n  paddingRight: 21,\n  showGrid: true,\n  showLegend: false,\n  showXAxis: true,\n  showYAxis: true,\n  xAxisFontColor: '#727a77',\n  xAxisFontSize: '12px',\n  xAxisTicks: 0,\n  yAxisFontColor: '#727a77',\n  yAxisFontSize: '12px',\n  yAxisTicks: 5,\n};\n\nclass BarChart extends DechartBase {\n  constructor({\n    chartType,\n    componentId,\n    data,\n    options,\n  }) {\n    super({\n      chartType,\n      componentId,\n      data,\n      defaultOptions,\n      options,\n    });\n\n    this.xScale = null;\n    this.yScale = null;\n\n    this.yMax = null;\n    this.yMin = null;\n\n    this.$svgRootInner = null;\n\n    this.renderProxy();\n  }\n\n  hasDrawableData() {\n    const { data, options } = this;\n    return data != null\n        && (data.values != null && data.values.length > 0)\n        && (data.keys || options.selectedSeries);\n  }\n\n  preprocess() {\n    const {\n      data,\n      options,\n    } = this;\n    const {\n      keys,\n      values,\n    } = data;\n    const sortedData = [ ...values ].sort((value1, value2) => {\n      const date1 = new Date(value1.date);\n      const date2 = new Date(value2.date);\n      if (date1 > date2) {\n        return 1;\n      } else if (date1 < date2) {\n        return -1;\n      } else {\n        return 0;\n      }\n    });\n    const processedData = [];\n    sortedData.forEach((d) => {\n      processedData.push({\n        key: d3.isoParse(d.date),\n        value: keys\n          ? +d[Object.keys(keys)[0]]\n          : +d[options.selectedSeries],\n      });\n    });\n    this.data = processedData;\n\n    const {\n      xAxisTicks,\n      barWidth,\n      marginLeft,\n      marginRight,\n      paddingLeft,\n      paddingRight,\n      width,\n    } = this.options;\n    if (barWidth && !width) {\n      this.options.width = ((xAxisTicks + barWidth) * processedData.length)\n        + paddingLeft + paddingRight + marginLeft + marginRight;\n    } else if (!barWidth && width) {\n      this.options.barWidth = (width - paddingLeft - paddingRight)\n        / processedData.length - xAxisTicks;\n    }\n  }\n\n  render() {\n    const willDraw = this.hasDrawableData();\n    if (!willDraw) {\n      return false;\n    }\n\n    this.preprocess();\n    this.renderRoot();\n    this.options.showGrid && this.renderGrid();\n    this.options.showXAxisLine && this.renderXAxisLine();\n    this.options.showXAxis && this.renderXAxis();\n    this.options.showYAxis && this.renderYAxis();\n    this.renderBars();\n\n    return true;\n  }\n\n  renderBars() {\n    const {\n      data,\n      options,\n      pureHeight,\n      xScale,\n      yScale,\n      $svgRootInner: rootInner,\n    } = this;\n\n    const bars = rootInner.selectAll('.chunk')\n      .data(data);\n\n    bars.enter()\n      .append('rect')\n      .attr('class', 'bar')\n      .attr('x', (d) => xScale(d.key))\n      .attr('y', (d) => yScale(d.value))\n      .attr('height', (d) => (pureHeight - yScale(d.value)))\n      .attr('width', options.barWidth);\n\n    bars.attr('x', (d) => xScale(d.key))\n      .attr('y', (d) => yScale(d.value))\n      .attr('height', (d) => (pureHeight - yScale(d.value)))\n      .attr('width', options.barWidth);\n\n    bars.exit()\n      .remove();\n  }\n\n  renderGrid() {\n    const {\n      options,\n      pureWidth,\n      yMax,\n      yMin,\n      yScale,\n      $svgRootInner: rootInner,\n    } = this;\n\n    const yGrid = d3.axisLeft(yScale)\n      .tickFormat('')\n      .tickValues(createEvenlySpacedArray(yMin, yMax, options.yAxisTicks))\n      .tickSize(-pureWidth);\n\n    rootInner.append('g')\n      .attr('class', 'grid')\n      .call(yGrid);\n\n    rootInner.selectAll('.grid')\n      .select('line')\n      .attr('data-dechart-className', 'first-grid-line');\n  }\n\n  renderRoot() {\n    const {\n      data,\n      options,\n      pureHeight,\n      pureWidth,\n      $svgRoot: svgRoot,\n    } = this;\n\n    svgRoot\n      .style('background-color', options.backgroundColor)\n      .style('height', options.height - options.legendHeight)\n      .style('width', options.width);\n    this.$svgRootInner = svgRoot.append('g')\n      .attr('class', SVG_ROOT_INNER)\n      .attr('transform', `translate(${options.marginLeft}, ${options.marginTop})`);\n\n    this.yMax = normalizeMaxValue(d3.max(data, (d) => pick((a, b) => a > b, d, 'value')));\n    this.yMin = d3.min(data, (d) => pick((a, b) => a < b, d, 'value'));\n\n    if (this.yMax === this.yMin) {\n      this.yMin = this.yMin / 2;\n      this.yMax = this.yMax + this.yMin;\n    }\n\n    this.xScale = d3.scaleBand()\n      .domain(data.map((d) => d.key))\n      .range([ options.paddingLeft, pureWidth - options.paddingRight ]);\n    this.yScale = d3.scaleLinear()\n      .domain([ options.minYScale ? this.yMin : 0, this.yMax ])\n      .range([ pureHeight, 0 ]);\n  }\n\n  renderXAxis() {\n    const {\n      options,\n      pureHeight,\n      xScale,\n      $svgRootInner: svgInner,\n    } = this;\n\n    const xAxis = d3.axisBottom(xScale)\n      .tickFormat((key) => getMonthName(key, false))\n      .ticks(options.xAxisTicks);\n\n    const xAxisTicks = svgInner.append('g')\n      .attr('class', 'axis axis-x')\n      .attr('transform', `translate(0, ${pureHeight})`)\n      .call(xAxis);\n\n    xAxisTicks.selectAll('path')\n      .style('display', 'none');\n\n    xAxisTicks.selectAll('line')\n      .attr('class', (date) => (isMidnight(date) ? '' : 'hide'));\n\n    xAxisTicks.selectAll('text')\n      .call(makeWrap(3))\n      .attr('dx', -0.5 * options.xAxisTicks)\n      .attr('dy', '9px')\n      .attr('font-size', options.xAxisFontSize);\n  }\n\n  renderYAxis() {\n    const {\n      options,\n      yMax,\n      yMin,\n      yScale,\n      $svgRootInner: svgInner,\n    } = this;\n\n    const yAxis = d3.axisLeft(yScale)\n      .tickValues(createEvenlySpacedArray(yMin, yMax, options.yAxisTicks))\n      .tickFormat((d) => abbrNum(d, 1));\n\n    const yAxisTicks = svgInner.append('g')\n      .attr('class', 'axis axis-y')\n      .call(yAxis);\n\n    yAxisTicks.selectAll('line')\n      .attr('display', 'none');\n    yAxisTicks.selectAll('text')\n      .attr('x', '0')\n      .attr('dy', '1.2em')\n      .attr('text-anchor', 'start')\n      .attr('font-size', options.yAxisFontSize);\n  }\n\n  style() {\n    const {\n      cssNamespace: ns,\n      options,\n    } = this;\n    return `\n      ${ns} .area {\n        fill: blue;\n      }\n\n      ${ns} .axis {\n        stroke: #cccccc;\n      }\n\n      ${ns} .axis line {\n        stroke: #cccccc;\n      }\n\n      ${ns} .axis path {\n        stroke: transparent;\n      }\n\n      ${ns} .axis text {\n        stroke: transparent;\n        stroke-width: 0px;\n        text-anchore: start;\n      }\n\n      ${ns} .axis-x {\n        stroke: #cccccc;\n      }\n\n      ${ns} .axis-x text {\n        fill: ${options.xAxisFontColor};\n      }\n\n      ${ns} .axis-y {\n        stroke: transparent;\n      }\n\n      ${ns} .axis-y text {\n        fill: ${options.yAxisFontColor};        \n      }\n\n      ${ns} .bar {\n        fill: ${options.barColor};\n        stroke-width: 0px;\n      }\n\n      ${ns} .bar:hover {\n        fill: ${options.barColorHover};\n      }\n\n      ${ns} .domain path {\n        stroke: transparent;\n      }\n\n      ${ns} .grid line {\n        stroke: ${options.gridColor};\n      }\n\n      ${ns} .grid path {\n        stroke: transparent;\n      }\n    `;\n  }\n}\n\nexport default BarChart;\n"],"file":"BarChart.js"}