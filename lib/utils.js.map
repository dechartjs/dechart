{"version":3,"sources":["utils.ts"],"names":["compose","funcs","length","arg","reduce","a","b","makeBisector","key","d3","bisector","d","left","pushToObject","obj","elem","Error","undefined","Array","isArray","push","valueSum","excludeKey","Object","keys","filter","acc","curr","abbrNum","value","upperCase","newValue","suffixes","suffixNum","Math","floor","shortValue","shortValueString","precision","parseFloat","pow","toPrecision","dotLessShortValue","replace","toFixed","toUpperCase","pick","comparator","includeKeys","val","includes","createEvenlySpacedArray","min","max","numOfSplits","from","index","normalizeMaxValue","dataMax","defaultMax","dataMaxAbs","abs","flooredNum","trunc","toString","normalizedMax","FULL_YEAR_PLACEHOLDER","DATE_PLACEHOLDER","MONTH_PLACEHOLDER","MONTH_NAME_PLACEHOLDER","HOUR_PLACEHOLDER","isMidnight","date","timeFormat","getFormattedDate","month","day","format","makeWrap","maxLineCount","replaceNewlineCharacters","text","each","textElement","select","words","split","slice","word","append","attr","longMonthNames","shortMonthNames","getMonthName","long","Date","getMonth"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\n// https://github.com/reduxjs/redux/blob/master/src/compose.js\nexport function compose(...funcs) {\n  if (funcs.length === 0) {\n    return (arg) => arg;\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce((a, b) => (...args) => a(b(...args)));\n}\n\nexport function makeBisector(key = 'date') {\n  return d3.bisector((d) => d[key]).left;\n}\n\nexport function pushToObject(obj: any, key, elem) {\n  if (!obj) throw new Error(`cannot add ${key}`);\n\n  if (obj[key] === undefined || !Array.isArray(obj[key])) {\n    obj[key] = [ elem ];\n  } else {\n    obj[key].push(elem);\n  }\n}\n\nexport function valueSum(obj, excludeKey = 'date') {\n  return Object.keys(obj)\n    .filter((key) => key !== excludeKey)\n    .reduce((acc, curr) => {\n      return acc + +obj[curr];\n    }, 0);\n}\n\nexport function abbrNum(value, upperCase = false) {\n  let newValue = value;\n  if (value >= 1000) {\n    const suffixes = [ '', 'k', 'm', 'b', 't' ];\n    const suffixNum = Math.floor(('' + value).length / 3);\n    let shortValue = 0;\n    let shortValueString = '';\n    for (let precision = 2; precision >= 1; precision--) {\n      shortValue = parseFloat((suffixNum != 0\n        ? (value / Math.pow(1000, suffixNum))\n        : value).toPrecision(precision));\n      const dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n      if (dotLessShortValue.length <= 2) {\n        break;\n      }\n    }\n\n    if (shortValue % 1 != 0) {\n      shortValueString = shortValue.toFixed(1);\n    }\n\n    newValue = shortValueString\n      + (upperCase ? suffixes[suffixNum].toUpperCase() : suffixes[suffixNum]);\n  }\n  return newValue;\n}\n\nexport function pick(comparator, obj, includeKeys = []) {\n  let val = 0;\n  for (const key in obj) {\n    if (includeKeys.includes(key)) {\n      val = comparator(+obj[key], +val) ? +obj[key] : +val;\n    }\n  }\n  return val;\n}\n\nexport function createEvenlySpacedArray(min, max, numOfSplits) {\n  return Array.from(\n    new Array(numOfSplits + 1),\n    (val, index) => min + index * (max - min) / numOfSplits,\n  );\n}\n\n// 31 => 40, 999 => 1000, 10000 => 20000\nexport function normalizeMaxValue(dataMax = 0) {\n  const defaultMax = 10;\n  const dataMaxAbs = Math.abs(dataMax);\n\n  if (dataMaxAbs < defaultMax) {\n    return dataMax >= 0 ? defaultMax : defaultMax * -1;\n  }\n  const flooredNum = Math.pow(10, Math.trunc(dataMaxAbs).toString().length - 1);\n  const normalizedMax = Math.trunc(dataMaxAbs / flooredNum) * flooredNum + flooredNum;\n  return dataMax >= 0 ? normalizedMax : normalizedMax * -1;\n}\n\nconst FULL_YEAR_PLACEHOLDER = '%Y';\nconst DATE_PLACEHOLDER = '%d';\nconst MONTH_PLACEHOLDER = '%m';\nconst MONTH_NAME_PLACEHOLDER = '%b';\nconst HOUR_PLACEHOLDER = '%H';\n\nexport function isMidnight(date) {\n  return d3.timeFormat(HOUR_PLACEHOLDER)(date) === '00';\n}\n\nexport function getFormattedDate(date) {\n  if (!isMidnight(date)) {\n    return '';\n  }\n  const month = d3.timeFormat(MONTH_PLACEHOLDER)(date);\n  const day = d3.timeFormat(DATE_PLACEHOLDER)(date);\n  let format = '';\n  if (month === '01' && day === '01') {\n    format = `${MONTH_NAME_PLACEHOLDER}\\n${FULL_YEAR_PLACEHOLDER}`;\n  } else if (day === '01') {\n    format = MONTH_NAME_PLACEHOLDER;\n  } else {\n    format = DATE_PLACEHOLDER;\n  }\n  return d3.timeFormat(format)(date);\n}\n\nexport function makeWrap(maxLineCount = 1) {\n  return function replaceNewlineCharacters(text) {\n    text.each(function () {\n      const textElement = d3.select(this);\n      const words = textElement.text().split(/\\n+/);\n      textElement.text('');\n\n      for (const word of words.slice(0, maxLineCount)) {\n        textElement.append('tspan')\n          .attr('x', 0)\n          .attr('dy', '1em')\n          .text(word);\n      }\n    });\n  };\n}\n\nconst longMonthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst shortMonthNames = [\n  'Jan',\n  'Feb',\n  'Mar',\n  'Apr',\n  'May',\n  'Jun',\n  'Jul',\n  'Aug',\n  'Sep',\n  'Oct',\n  'Nov',\n  'Dec',\n];\n\nexport function getMonthName(date, long = true) {\n  if (!(date instanceof Date)) {\n    return null;\n  }\n\n  const month = date.getMonth();\n  if (month < 0 || month > 11) {\n    return null;\n  }\n\n  return long ? longMonthNames[month] : shortMonthNames[month];\n}\n"],"file":"utils.js"}